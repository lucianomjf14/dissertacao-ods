from docx import Document
import pandas as pd
import re
from collections import Counter
import shutil
import os

def fazer_backup_e_corrigir():
    """
    Faz backup do documento original e aplica corre√ß√µes diretamente
    """
    
    import glob
    docx_files = glob.glob('*.docx')
    if not docx_files:
        print("‚ùå Nenhum arquivo DOCX encontrado")
        return False
    
    docx_original = docx_files[0]
    print(f"üìÑ Documento original: {docx_original}")
    
    # Fazer backup
    backup_name = docx_original.replace('.docx', '_BACKUP.docx')
    shutil.copy2(docx_original, backup_name)
    print(f"üíæ Backup criado: {backup_name}")
    
    # Carregar dados corretos da planilha
    df = pd.read_excel("An√°lise de Conte√∫do - Luciano 22_06.xlsx")
    
    # Contar ODS corretos
    ods_counter = Counter()
    for idx, row in df.iterrows():
        ods_raw = str(row['ODS Mencionados pelos Autores'])
        if ods_raw.lower() != 'geral' and ods_raw != 'nan':
            ods_encontrados = re.findall(r'ODS\s+(\d+)', ods_raw)
            for ods_num in ods_encontrados:
                ods_counter[int(ods_num)] += 1
    
    total_registros = len(df)
    
    print(f"\\nüìä DADOS CORRETOS DA PLANILHA:")
    print(f"   - ODS 7: {ods_counter[7]} men√ß√µes ({ods_counter[7]/total_registros*100:.2f}%)")
    print(f"   - ODS 9: {ods_counter[9]} men√ß√µes ({ods_counter[9]/total_registros*100:.2f}%)")
    print(f"   - ODS 11: {ods_counter[11]} men√ß√µes ({ods_counter[11]/total_registros*100:.2f}%)")
    print(f"   - ODS 13: {ods_counter[13]} men√ß√µes ({ods_counter[13]/total_registros*100:.2f}%)")
    
    # Abrir documento original para edi√ß√£o
    try:
        doc = Document(docx_original)
        print(f"üìÑ Documento carregado com {len(doc.paragraphs)} par√°grafos")
        
        corre√ß√µes_realizadas = 0
        
        # CORRE√á√ïES ESPEC√çFICAS
        for i, para in enumerate(doc.paragraphs):
            texto_original = para.text.strip()
            texto_modificado = texto_original
            
            # Corre√ß√£o 1: Tecnologia e Inova√ß√£o
            if "Tecnologia e Inova√ß√£o (32 men√ß√µes, presente em 85% dos estudos)" in texto_original:
                texto_modificado = texto_original.replace(
                    "Tecnologia e Inova√ß√£o (32 men√ß√µes, presente em 85% dos estudos)",
                    "Tecnologia e Inova√ß√£o (38 men√ß√µes, presente em 92,7% dos estudos)"
                )
                corre√ß√µes_realizadas += 1
                print(f"‚úÖ {corre√ß√µes_realizadas}. Corrigido Tecnologia e Inova√ß√£o (par√°grafo {i})")
            
            # Corre√ß√£o 2: Governan√ßa  
            elif "Governan√ßa (30 men√ß√µes, 73% dos estudos)" in texto_original:
                texto_modificado = texto_original.replace(
                    "Governan√ßa (30 men√ß√µes, 73% dos estudos)",
                    "Governan√ßa (37 men√ß√µes, 90,2% dos estudos)"
                )
                corre√ß√µes_realizadas += 1
                print(f"‚úÖ {corre√ß√µes_realizadas}. Corrigido Governan√ßa (par√°grafo {i})")
            
            # Corre√ß√£o 3: Meio Ambiente
            elif "Meio Ambiente (27 men√ß√µes, 63% dos estudos)" in texto_original:
                texto_modificado = texto_original.replace(
                    "Meio Ambiente (27 men√ß√µes, 63% dos estudos)",
                    "Meio Ambiente (33 men√ß√µes, 80,5% dos estudos)"
                )
                corre√ß√µes_realizadas += 1
                print(f"‚úÖ {corre√ß√µes_realizadas}. Corrigido Meio Ambiente (par√°grafo {i})")
            
            # Corre√ß√£o 4: Energia
            elif "Energia (23 men√ß√µes, 59% dos estudos)" in texto_original:
                texto_modificado = texto_original.replace(
                    "Energia (23 men√ß√µes, 59% dos estudos)",
                    "Energia (34 men√ß√µes, 82,9% dos estudos)"
                )
                corre√ß√µes_realizadas += 1
                print(f"‚úÖ {corre√ß√µes_realizadas}. Corrigido Energia (par√°grafo {i})")
            
            # Corre√ß√£o 5: Urbanismo
            elif "Urbanismo (19 men√ß√µes, 46% dos estudos)" in texto_original:
                texto_modificado = texto_original.replace(
                    "Urbanismo (19 men√ß√µes, 46% dos estudos)",
                    "Urbanismo (23 men√ß√µes, 56,1% dos estudos)"
                )
                corre√ß√µes_realizadas += 1
                print(f"‚úÖ {corre√ß√µes_realizadas}. Corrigido Urbanismo (par√°grafo {i})")
            
            # Corre√ß√£o 6: Mobilidade (mais complexa)
            elif "Mobilidade (18 men√ß√µes, 44% dos estudos)" in texto_original:
                texto_modificado = texto_original.replace(
                    "Mobilidade (18 men√ß√µes, 44% dos estudos): o sexto pilar mais frequente",
                    "Mobilidade (38 men√ß√µes, 92,7% dos estudos): empatado como o pilar mais frequente"
                )
                corre√ß√µes_realizadas += 1
                print(f"‚úÖ {corre√ß√µes_realizadas}. Corrigido Mobilidade (par√°grafo {i})")
            
            # Corre√ß√£o 7: Reordenar descri√ß√£o dos pilares
            elif "este pilar apresenta a maior incid√™ncia, refor√ßando seu papel central" in texto_original and "Tecnologia e Inova√ß√£o" in texto_original:
                texto_modificado = texto_original.replace(
                    "este pilar apresenta a maior incid√™ncia, refor√ßando seu papel central",
                    "empatado como o pilar mais frequente junto com Mobilidade, refor√ßa seu papel central"
                )
                corre√ß√µes_realizadas += 1
                print(f"‚úÖ {corre√ß√µes_realizadas}. Corrigida descri√ß√£o TIC (par√°grafo {i})")
            
            # Corre√ß√£o 8: Conclus√£o dos pilares
            elif "A predomin√¢ncia de Tecnologia e Inova√ß√£o reflete" in texto_original:
                texto_modificado = texto_original.replace(
                    "A predomin√¢ncia de Tecnologia e Inova√ß√£o reflete o papel fundamental das solu√ß√µes digitais",
                    "O empate entre Mobilidade e Tecnologia e Inova√ß√£o como pilares mais importantes reflete tanto a centralidade dos sistemas de transporte quanto o papel fundamental das solu√ß√µes digitais"
                )
                corre√ß√µes_realizadas += 1
                print(f"‚úÖ {corre√ß√µes_realizadas}. Corrigida conclus√£o pilares (par√°grafo {i})")
            
            # Aplicar modifica√ß√£o se houve mudan√ßa
            if texto_modificado != texto_original:
                para.clear()
                para.add_run(texto_modificado)
        
        # Salvar documento modificado
        doc.save(docx_original)
        print(f"\\nüíæ Documento original atualizado com {corre√ß√µes_realizadas} corre√ß√µes")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao processar documento: {e}")
        return False

def adicionar_pilar_seguranca():
    """
    Adiciona o pilar Seguran√ßa que estava faltando
    """
    import glob
    docx_files = glob.glob('*.docx')
    if not docx_files:
        return False
    
    doc = Document(docx_files[0])
    
    # Procurar onde inserir o pilar Seguran√ßa
    for i, para in enumerate(doc.paragraphs):
        texto = para.text.strip()
        
        # Inserir ap√≥s Governan√ßa e antes de Energia
        if "Governan√ßa (37 men√ß√µes, 90,2% dos estudos)" in texto:
            print(f"üìç Encontrado local para inserir Seguran√ßa ap√≥s par√°grafo {i}")
            
            # Criar novo par√°grafo para Seguran√ßa
            novo_para = doc.add_paragraph()
            texto_seguranca = "4. Seguran√ßa (35 men√ß√µes, 85,4% dos estudos): este pilar emerge como uma dimens√£o fundamental das cidades inteligentes, evidenciando a import√¢ncia dos sistemas de monitoramento, videovigil√¢ncia inteligente e gest√£o de emerg√™ncias nas iniciativas urbanas. A presen√ßa significativa da Seguran√ßa nos estudos demonstra que as C.I. devem contemplar n√£o apenas efici√™ncia e sustentabilidade, mas tamb√©m prote√ß√£o e resili√™ncia urbana."
            novo_para.add_run(texto_seguranca)
            
            print("‚úÖ Pilar Seguran√ßa adicionado")
            
            # Salvar
            doc.save(docx_files[0])
            return True
    
    return False

if __name__ == "__main__":
    print("üîß INICIANDO CORRE√á√ïES DIRETAS NO DOCUMENTO FINAL")
    print("="*60)
    
    sucesso = fazer_backup_e_corrigir()
    
    if sucesso:
        print("\\n‚úÖ CORRE√á√ïES APLICADAS COM SUCESSO!")
        print("\\nüéØ PR√ìXIMO: Executar auditoria para verificar precis√£o")
        
        # Executar auditoria imediatamente
        print("\\nüîç EXECUTANDO AUDITORIA DE VERIFICA√á√ÉO...")
        
        import subprocess
        try:
            resultado = subprocess.run([
                "c:/Users/lucia/Disserta√ß√£o/.venv/Scripts/python.exe", 
                "auditoria_dados_dissertacao.py"
            ], capture_output=True, text=True, cwd=".")
            
            print("üìä RESULTADO DA AUDITORIA:")
            print(resultado.stdout[-1000:])  # √öltimas 1000 caracteres
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na auditoria: {e}")
    else:
        print("‚ùå FALHA NAS CORRE√á√ïES")
